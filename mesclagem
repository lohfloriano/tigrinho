import random

# entrada v√°lida
def entrada_valida(mensagem):
    while True:
        dado = input(mensagem).strip()
        if dado:
            return dado
        print("Preencha o campo vazio.")

# valida√ß√£o de CPF
def validar_cpf(cpf):
    return len(cpf) == 11 and cpf.isdigit()

# verifica se usu√°rio j√° existe
def verificar_existencia(usuario, cpf):
    try:
        with open("usuarios.txt", "r") as arquivo:
            for linha in arquivo:
                dados = linha.strip().split(",")
                if len(dados) == 4:
                    nome_salvo, cpf_salvo, _, _ = dados
                    if usuario == nome_salvo:
                        print("\n‚ö†Ô∏è Nome de usu√°rio j√° existe. Escolha outro.")
                        return True
                    if cpf == cpf_salvo:
                        print("\n‚ö†Ô∏è CPF j√° cadastrado.")
                        return True
    except FileNotFoundError:
        pass
    return False

# usu√°rio com saldo inicial
def registrar():
    usuario = entrada_valida("Digite seu nome de usu√°rio:")
    while True:
        cpf = input("Informe seu CPF:")
        if validar_cpf(cpf):
            break
        else:
            print("CPF inv√°lido. Informe apenas n√∫meros com 11 d√≠gitos.")
    senha = entrada_valida("Digite sua senha:")
    if verificar_existencia(usuario, cpf):
        print("\n‚ö†Ô∏è Cadastro n√£o permitido. Tente novamente.\n")
        return None, None, None
    saldo_inicial = 10 
    with open("usuarios.txt", "a") as arquivo:
        arquivo.write(f"{usuario},{cpf},{senha},{saldo_inicial}\n")
    print("\n‚úÖ Cadastro realizado com sucesso!")
    return usuario, senha, saldo_inicial

# login e recupera√ß√£o do saldo
def login():
    while True:
        login_usuario = entrada_valida("Digite seu nome de usu√°rio: ")
        login_senha = entrada_valida("Digite sua senha: ")
        with open("usuarios.txt", "r") as arquivo:
            usuarios_cadastrados = arquivo.readlines()
        for linha in usuarios_cadastrados:
            dados = linha.strip().split(",")
            if len(dados) == 4:
                nome_salvo, _, senha_salva, saldo = dados
                if login_usuario == nome_salvo and login_senha == senha_salva:
                    print("\n‚úÖ Login realizado com sucesso! Bem-vindo de volta!")
                    return login_usuario, int(saldo)
        print("‚ö†Ô∏è Usu√°rio ou senha incorretos. Tente novamente.")

# atualiza saldo do usu√°rio no arquivo
def atualizar_saldo(usuario, novo_saldo):
    linhas = []
    with open("usuarios.txt", "r") as arquivo:
        for linha in arquivo:
            dados = linha.strip().split(",")
            if len(dados) == 4 and dados[0] == usuario:
                dados[3] = str(novo_saldo)
            linhas.append(",".join(dados))
    with open("usuarios.txt", "w") as arquivo:
        arquivo.write("\n".join(linhas) + "\n")

def gerar_matriz():
    simbolos = ["7", "üêÖ", "üêØ"]
    return [[random.choice(simbolos) for _ in range(3)] for _ in range(3)]

def exibir_matriz(matriz):
    print("-" * 20)
    for linha in matriz:
        print(" | ".join(linha))
    print("-" * 20)

def verificar_vitoria_spin(matriz):
    for i in range(3):
        if matriz[i][0] == matriz[i][1] == matriz[i][2] or matriz[0][i] == matriz[1][i] == matriz[2][i]:
            return True
    return False

# adicionar saldo
def adicionar_saldo(saldo):
    print("\nüí∞ Op√ß√µes para adicionar saldo: 5, 10, 20, 50 reais")
    while True:
        try:
            valor = int(input("Quanto deseja adicionar? "))
            if valor in [5, 10, 20, 50]:
                return saldo + valor
            else:
                print("Op√ß√£o inv√°lida. Escolha entre 5, 10, 20 ou 50 reais.")
        except ValueError:
            print("Digite um n√∫mero v√°lido.")

# jogo
def jogar(nome, saldo):
    while True:
        print(f"\nüíµ Saldo atual: R${saldo}")
        opcao = input("Deseja adicionar saldo? (s/n): ").strip().lower()
        if opcao == "s":
            saldo = adicionar_saldo(saldo)
            atualizar_saldo(nome, saldo)
            continue
        elif opcao == "n":
            break
        else:
            print("Digite 's' para sim ou 'n' para n√£o.")
    
    while True:
        try:
            giros = int(input("Informe o n√∫mero de giros que voc√™ deseja: "))
            if giros <= 0 or giros > saldo:
                print("O n√∫mero de giros deve ser maior que zero e menor ou igual ao saldo!")
                continue
            break
        except ValueError:
            print("Por favor, digite um n√∫mero inteiro v√°lido.")
    
    win_count = 0
    for giro in range(1, giros + 1):
        saldo -= 1
        input(f"\nPressione Enter para realizar o giro {giro}...")
        print(f"\n=== Giro {giro} ===")
        matriz = gerar_matriz()
        exibir_matriz(matriz)
        if verificar_vitoria_spin(matriz):
            print(" WIN  ")
            saldo += 2
            win_count += 1
        else:
            print("Giro sem vit√≥ria. Tente novamente!")
    
    atualizar_saldo(nome, saldo)
    print("\n=== Fim dos Giros ===")
    print(f"Voc√™ obteve {win_count} giro(s) vencedor(es).")
    print(f"Seu saldo atual √© R${saldo}.")
    
    continuar = input("Deseja continuar jogando? (s/n): ").strip().lower()
    if continuar == "s":
        jogar(nome, saldo)
    else:
        print("Obrigado por jogar! At√© a pr√≥xima! üêØ")

def main():
    print(" Bem-vindo ao Tigrinho üêØ ")
    while True:
        escolha = input("Voc√™ j√° possui cadastro? (s/n): ").strip().lower()
        if escolha == "s":
            nome, saldo = login()
            if nome:
                break
        elif escolha == "n":
            nome, _, saldo = registrar()
            if nome:
                nome, saldo = login()
                if nome:
                    break
        else:
            print("Por favor, responda com 's' para sim ou 'n' para n√£o.")
    jogar(nome, saldo)

if __name__ == "__main__":
    main()
